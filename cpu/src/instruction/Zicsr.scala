package cpu.instruction

import chisel3._
import chisel3.util._
import chipsalliance.rocketchip.config._

import cpu.pipeline.NumTypes._
import cpu.component.Operators._
import cpu.pipeline.ExecSpecials._
import cpu.pipeline.InstrTypes._
import cpu.tools._
import cpu._

case class Zicsr()(implicit val p: Parameters) extends CPUParams {
  def CSRRW  = BitPat("b????????????_?????_001_?????_1110011")
  def CSRRS  = BitPat("b????????????_?????_010_?????_1110011")
  def CSRRC  = BitPat("b????????????_?????_011_?????_1110011")
  def CSRRWI = BitPat("b????????????_?????_101_?????_1110011")
  def CSRRSI = BitPat("b????????????_?????_110_?????_1110011")
  def CSRRCI = BitPat("b????????????_?????_111_?????_1110011")

  val table = Array(
    //            |Type|num1 |num2 |num3 |num4 |op1_2| WB |Special|
    CSRRW  -> List(  c , csr , rs1 , non , non , nop , 1.B,  norm ),
    CSRRS  -> List(  c , csr , rs1 , non , non , nop , 1.B,  norm ),
    CSRRC  -> List(  c , csr , rs1 , non , non , nop , 1.B,  norm ),
    CSRRWI -> List(  c , csr , imm , non , non , nop , 1.B,  norm ),
    CSRRSI -> List(  c , csr , imm , non , non , nop , 1.B,  norm ),
    CSRRCI -> List(  c , csr , imm , non , non , nop , 1.B,  norm )
  )
}
