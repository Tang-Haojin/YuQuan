package cpu.instruction

import chisel3._
import chisel3.util._
import chipsalliance.rocketchip.config._

import cpu.pipeline.NumTypes._
import cpu.component.Operators._
import cpu.pipeline.InstrTypes._
import cpu.pipeline._
import cpu.tools._
import cpu._

case class RVC()(implicit val p: Parameters) extends CPUParams {
  // quadrant 0
  def C_ERR      = BitPat("b????????????????_000_000_000_00_000_00")
  def C_ADDI4SPN = BitPat("b????????????????_000_???_???_??_???_00") // when nzuimm = 0, raise an invalid instruction exception
  def C_LW       = BitPat("b????????????????_010_???_???_??_???_00")
  def C_LD       = BitPat("b????????????????_011_???_???_??_???_00") // RV64/128
  def C_SW       = BitPat("b????????????????_110_???_???_??_???_00")
  def C_SD       = BitPat("b????????????????_111_???_???_??_???_00") // RV64/128

  // quadrant 1
  def C_ADDI     = BitPat("b????????????????_000_?_?????_?????_01")
  def C_JAL      = BitPat("b????????????????_001_?_?????_?????_01") // RV32
  def C_ADDIW    = BitPat("b????????????????_001_?_?????_?????_01") // RV64/128
  def C_LI       = BitPat("b????????????????_010_?_?????_?????_01")
  def C_ADDI16SP = BitPat("b????????????????_011_?_00010_?????_01")
  def C_LUI      = BitPat("b????????????????_011_?_?????_?????_01")
  def C_SRLI     =
    if(xlen!=32)   BitPat("b????????????????_100_?_00???_?????_01")
    else           BitPat("b????????????????_100_0_00???_?????_01")
  def C_SRAI     =
    if(xlen!=32)   BitPat("b????????????????_100_?_01???_?????_01")
    else           BitPat("b????????????????_100_0_01???_?????_01")
  def C_ANDI     = BitPat("b????????????????_100_?_10???_?????_01")
  def C_SUB      = BitPat("b????????????????_100_0_11???_00???_01")
  def C_XOR      = BitPat("b????????????????_100_0_11???_01???_01")
  def C_OR       = BitPat("b????????????????_100_0_11???_10???_01")
  def C_AND      = BitPat("b????????????????_100_0_11???_11???_01")
  def C_SUBW     = BitPat("b????????????????_100_1_11???_00???_01") // RV64/128
  def C_ADDW     = BitPat("b????????????????_100_1_11???_01???_01") // RV64/128
  def C_J        = BitPat("b????????????????_101_?_?????_?????_01")
  def C_BEQZ     = BitPat("b????????????????_110_?_?????_?????_01")
  def C_BNEZ     = BitPat("b????????????????_111_?_?????_?????_01")

  // quadrant 2
  def C_SLLI     =
    if(xlen!=32)   BitPat("b????????????????_000_?_?????_?????_10")
    else           BitPat("b????????????????_000_0_?????_?????_10")
  def C_LWSP     = BitPat("b????????????????_010_?_?????_?????_10") // rd != 0
  def C_LDSP     = BitPat("b????????????????_011_?_?????_?????_10") // RV64/128, rd != 0
  def C_JR       = BitPat("b????????????????_100_0_?????_00000_10") // rs1 != 0
  def C_MV       = BitPat("b????????????????_100_0_?????_?????_10")
  def C_EBREAK   = BitPat("b????????????????_100_1_00000_00000_10")
  def C_JALR     = BitPat("b????????????????_100_1_?????_00000_10") // rs1 != 0
  def C_ADD      = BitPat("b????????????????_100_1_?????_?????_10")
  def C_SWSP     = BitPat("b????????????????_110_?_?????_?????_10")
  def C_SDSP     = BitPat("b????????????????_111_?_?????_?????_10") // RV64/128

  val table = List(
    //                | Type  |num1 |num2 |num3 |num4 |op1_2| WB |     Special        |
    C_ERR      -> List(7.U    , pc  , non , non , non , non , 0.U, ExecSpecials.inv   ), // quadrant 0
    C_ADDI4SPN -> List(caddi4 , x2  , imm , non , non , add , 1.U, ExecSpecials.non   ),
    C_LW       -> List(cldst  , non , non , rs1p, imm , non , 1.U, ExecSpecials.ld    ),
    C_SW       -> List(cldst  , rs2p, non , rs1p, imm , add , 0.U, ExecSpecials.st    )) ++ (if (xlen != 32) List(
    C_LD       -> List(cldst  , non , non , rs1p, imm , non , 1.U, ExecSpecials.ld    ),
    C_SD       -> List(cldst  , rs2p, non , rs1p, imm , add , 0.U, ExecSpecials.st    )) else Nil) ++ List( // quadrant 1
    C_ADDI     -> List(c540   , rd1c, imm , non , non , add , 1.U, ExecSpecials.non   ),
    C_LI       -> List(c540   , non , imm , non , non , add , 1.U, ExecSpecials.non   ),
    C_ADDI16SP -> List(caddi16, rd1c, imm , non , non , add , 1.U, ExecSpecials.non   ),
    C_LUI      -> List(clui   , non , imm , non , non , add , 1.U, ExecSpecials.non   ),
    C_SRLI     -> List(c540   , rd1p, imm , non , non , srl , 1.U, ExecSpecials.non   ),
    C_SRAI     -> List(c540   , rd1p, imm , non , non , sra , 1.U, ExecSpecials.non   ),
    C_ANDI     -> List(c540   , rd1p, imm , non , non , and , 1.U, ExecSpecials.non   ),
    C_SUB      -> List(cni    , rd1p, rs2p, non , non , sub , 1.U, ExecSpecials.non   ),
    C_XOR      -> List(cni    , rd1p, rs2p, non , non , xor , 1.U, ExecSpecials.non   ),
    C_OR       -> List(cni    , rd1p, rs2p, non , non , or  , 1.U, ExecSpecials.non   ),
    C_AND      -> List(cni    , rd1p, rs2p, non , non , and , 1.U, ExecSpecials.non   ),
    C_J        -> List(cj     , pc  , two , imm , non , add , 0.U, ExecSpecials.jump  ),
    C_BEQZ     -> List(cb     , rs1p, non , imm , non , equ , 0.U, ExecSpecials.branch),
    C_BNEZ     -> List(cb     , rs1p, non , imm , non , neq , 0.U, ExecSpecials.branch)) ++ (if (xlen == 32) List(
    C_JAL      -> List(cj     , pc  , two , imm , non , add , 1.U, ExecSpecials.jump  )) else List(
    C_ADDIW    -> List(c540   , rd1c, imm , non , non , add , 1.U, ExecSpecials.word  ),
    C_SUBW     -> List(cni    , rd1p, rs2p, non , non , sub , 1.U, ExecSpecials.word  ),
    C_ADDW     -> List(cni    , rd1p, rs2p, non , non , add , 1.U, ExecSpecials.word  ))) ++ List( // quadrant 2
    C_SLLI     -> List(c540   , rd1c, imm , non , non , sll , 1.U, ExecSpecials.non   ),
    C_LWSP     -> List(clsp   , non , non , x2  , imm , non , 1.U, ExecSpecials.ld    ),
    C_JR       -> List(cni    , pc  , two , non , rs1c, add , 0.U, ExecSpecials.jalr  ),
    C_MV       -> List(cni    , non , rs2c, non , non , add , 1.U, ExecSpecials.non   ),
    C_EBREAK   -> List(cni    , non , non , non , non , non , 0.U, ExecSpecials.ebreak),
    C_JALR     -> List(cni    , pc  , two , non , rs1c, add , 1.U, ExecSpecials.jalr  ),
    C_ADD      -> List(cni    , rd1c, rs2c, non , non , add , 1.U, ExecSpecials.non   ),
    C_SWSP     -> List(cssp   , rs2c, non , x2  , imm , add , 0.U, ExecSpecials.st    )) ++ (if (xlen != 32) List(
    C_LDSP     -> List(clsp   , non , non , x2  , imm , non , 1.U, ExecSpecials.ld    ),
    C_SDSP     -> List(cssp   , rs2c, non , x2  , imm , add , 0.U, ExecSpecials.st    )) else Nil)
}
