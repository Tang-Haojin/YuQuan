//------------------------------------------------------------------
//-- File generated by RobustVerilog parser
//-- RobustVerilog version 1.2 (limited free version)
//-- Invoked Sun Aug 08 17:50:13 2021
//-- Source file: axi2apb_cmd.v
//-- Parent file: axi2apb.v
//-- Run directory: C:/Users/tangh/OneDrive/桌面/RobustVerilog_free1.2_win/robust_axi2apb/trunk/run/
//-- Target directory: out/
//-- Command flags: ../src/base/axi2apb.v -od out -I ../src/gen -list list.txt -listpath -header -gui 
//-- www.provartec.com/edatools ... info@provartec.com
//------------------------------------------------------------------





module  axi2apb_cmd (clk,reset,AWID,AWADDR,AWLEN,AWSIZE,AWVALID,AWREADY,ARID,ARADDR,ARLEN,ARSIZE,ARVALID,ARREADY,finish_wr,finish_rd,cmd_empty,cmd_read,cmd_id,cmd_addr,cmd_err);

   input                   clk;
   input                   reset;

   input [3:0]            AWID;
   input [31:0]           AWADDR;
   input [3:0]            AWLEN;
   input [1:0]            AWSIZE;
   input                  AWVALID;
   output                 AWREADY;
   input [3:0]            ARID;
   input [31:0]           ARADDR;
   input [3:0]            ARLEN;
   input [1:0]            ARSIZE;
   input                  ARVALID;
   output                 ARREADY;
   input                  finish_wr;
   input                  finish_rd;
         
   output                 cmd_empty;
   output                 cmd_read;
   output [4-1:0]   cmd_id;
   output [32-1:0] cmd_addr;
   output                 cmd_err;
   
   
   wire [3:0]             AID;
   wire [31:0]            AADDR;
   wire [3:0]             ALEN;
   wire [1:0]             ASIZE;
   wire                   AVALID;
   wire                   AREADY;
   
   wire                   cmd_push;
   wire                   cmd_pop;
   wire                   cmd_empty;
   wire                   cmd_full;
   reg                    read;
   
   wire                   wreq, rreq;
   wire                   wack, rack;
   wire                   AERR;
   
   
   assign                 wreq = AWVALID;
   assign                 rreq = ARVALID;
   assign                 wack = AWVALID & AWREADY;
   assign                 rack = ARVALID & ARREADY;
         
   always @(posedge clk or posedge reset)
     if (reset)
       read <= 1'b1;
     else if (wreq & (rack | (~rreq)))
       read <= 1'b0;
     else if (rreq & (wack | (~wreq)))
       read <= 1'b1;

    //command mux
    assign AID = read ? ARID : AWID;
    assign AADDR = read ? ARADDR : AWADDR;
    assign ALEN = read ? ARLEN : AWLEN;
    assign ASIZE = read ? ARSIZE : AWSIZE;
    assign AVALID = read ? ARVALID : AWVALID;
    assign AREADY = read ? ARREADY : AWREADY;
    assign AERR   = (ASIZE != 'd2) | (ALEN != 'd0); //support only 32 bit single AXI commands
   
   assign ARREADY = (~cmd_full) & read;
   assign AWREADY = (~cmd_full) & (~read);
   
    assign               cmd_push  = AVALID & AREADY;
    assign               cmd_pop   = cmd_read ? finish_rd : finish_wr;
   
   prgen_fifo #(4+32+2, 2) 
   cmd_fifo(
        .clk(clk),
        .reset(reset),
        .push(cmd_push),
        .pop(cmd_pop),
        .din({
            AID,
            AADDR,
            AERR,
            read
            }
         ),
        .dout({
            cmd_id,
            cmd_addr,
            cmd_err,
            cmd_read
            }
          ),
        .empty(cmd_empty),
        .full(cmd_full)
        );

        
   
endmodule




